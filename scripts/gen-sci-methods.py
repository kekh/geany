import sys
from optparse import OptionParser
import re

out_fd = sys.stdout
h_fd = None

def push(x):
	out_fd.write(str(x).strip() + "\n")

def debug(x):
	sys.stderr.write(str(x).strip() + "\n")

def push_h(x):
	if h_fd is not None:
		h_fd.write(str(x).strip() + "\n")

if __name__ == "__main__":

	parser = OptionParser("Usage: %prog [options] path/to/sciwrappers (without extension)")
	parser.add_option("-o", "--output", action="store",
						help="Write C output to FILE", metavar="FILE")
	parser.add_option("-H", "--header", action="store",
						help="Write header output to FILE", metavar="FILE")
	(options, args) = parser.parse_args()

	if len(args) < 1:
		parser.print_help()
		exit(1)

	if options.output is not None:
		out_fd = open(options.output, "w+")

	if options.output is not None:
		h_fd = open(options.header, "w+")

	# build the list of exported functions
	exports = []
	f = open(args[0] + ".c")
	prog = re.compile(".*GEANY_EXPORT.*")
	prog2 = re.compile(".*(sci_[a-zA-Z0-9_]+)[\(].*")
	prev = None
	for line in f:
		if (prev is not None):
			if (prog.match(line) or prog.match(prev)):
				m = prog2.match(line)
				if (m):
					exports.append(m.group(1))
		prev = line

	# TODO: check input file for existence
	f.close()
	f = open(args[0] + ".h")

	text = \
'''/*
 * Auto-generated by gen-sci-methods.py from %s.[ch]
 * Do not edit!
 */
'''
	text = text % args[0]
	push(text)
	push_h(text)
	push_h("#ifndef SCIMETHODS_H")
	push_h("#define SCIMETHODS_H")

	prog = re.compile("(.+)(sci_[a-zA-Z0-9_]+)(.+);\s*$")
	prog2 = re.compile("GEANY_EXPORT")

	# generate .c/.h files and add GEANY_EXPORT if necessary
	prev = None
	for line in f:
		m = prog.match(line)
		if m is not None:
			sci_fn = m.group(2)
			new_fn = sci_fn.replace("sci_", "scintilla_object_")
			push_h("extern " + m.group(1) + new_fn + m.group(3) + ";")
			if (sci_fn in exports):
				push("GEANY_EXPORT")
			push(m.group(1) + new_fn + m.group(3) + " __attribute__((alias(\"" + m.group(2) + "\")));")
		# also insert G_IR_SCANNER define if appropriate
		if line.find("G_IR_SCANNER") != -1:
			push_h(line)
			push(line)
		prev = line

	f.close()

	push_h("#endif /* SCIMETHODS_H */")
